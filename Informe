Práctica 2 - Programación Lógica (Prolog)

Integrantes
Juan Diego Martinez Jaramilo

-Descripción
Este proyecto resuelve los dos retos planteados en la **Práctica 2 de Programación Lógica**:

1. Reto 1 — Base de Datos de Plataformas Informáticas**
   - Se creó una base de **50 entradas** (`platform/10`) con:
     - Marca, serial, año, RAM, CPU, núcleos, disco, tipo, GPU y VRAM.
   - Se implementaron consultas obligatorias (ej. CPU AMD después de 2021).
   - Se añadieron 4 consultas complejas adicionales.

2. Reto 2 — Planificador de Viajes**
   - Se diseñó una base de rutas (`ruta/7`) con medio de transporte, horarios, costo y disponibilidad.
   - Se implementaron reglas para:
     - Encontrar rutas directas y con escalas.
     - Calcular tiempo total y costo.
     - Seleccionar rutas óptimas por **tiempo** o **costo**.
     - Filtrar por disponibilidad y rango horario.
     - Sugerir alternativas si no hay rutas disponibles.

---

- Archivos
- `db_platforms.pl` → Reto 1 (base de datos + consultas).
- `travel_planner.pl` → Reto 2 (planificador de viajes).
- `README.md` → este documento.



 1. Cargar la base de datos
```prolog
?- [db_platforms].


2. Consultas de ejemplo (Reto 1)
?- amd_after_2021(L).              % Plataformas AMD adquiridas después de 2021
?- tablets_more_than_2gb(T).       % Tablets con más de 2GB de RAM
?- hdd_between_32_512(H).          % Discos entre 32GB y 512GB
?- count_asus(N).                  % Número de equipos ASUS
?- count_laptops_ram_hdd(M).       % Laptops con RAM>4 y HDD<512
?- top_n_by_vram(5, Top5).         % Top 5 equipos con mayor VRAM


3. Cargar el planificador
?- [travel_planner].


4. Consultas de ejemplo (Reto 2)
?- find_all_routes(bogota, medellin, R).
?- best_route(bogota, medellin, criterio(time), Best).
?- best_route(bogota, medellin, criterio(cost), Best).
?- find_all_routes(bogota, cartagena, All), only_available(All, Avail).
?- suggest_alternatives(bogota, bucaramanga, Alt).


-Pruebas sugeridas
  -Consultar todas las plataformas con VRAM ≥ 8 GB.
  -Buscar ruta Bogotá → Santa Marta optimizada por costo.
  -Filtrar rutas Bogotá → Medellín que salgan entre 6 y 12.


-Conclusiones
  -Prolog permite modelar bases de conocimiento declarativas sin necesidad de ciclos explícitos de control.
  -El uso de hechos y reglas facilita la definición de consultas complejas en pocas líneas.
  -Los retos muestran cómo Prolog puede aplicarse tanto en bases de datos como en sistemas expertos de planificación.


-Video
  -Duración: máximo 10 minutos.
  -Mostrar:
  -Introducción del equipo y objetivos.
  -Explicación de la base de datos (db_platforms.pl).
  -Ejecución de consultas obligatorias y adicionales.
  -Explicación del planificador de viajes (travel_planner.pl).
  -Ejecución de consultas de rutas.




 Enlace YouTube: 
 Enlace Repositorio: https://github.com/Juanea2008/Proyecto-Lenguajes-y-Paradigmas.git
